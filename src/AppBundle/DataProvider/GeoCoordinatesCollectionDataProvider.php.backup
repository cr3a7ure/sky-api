<?php

// src/AppBundle/DataProvider/GeoCoordinatesCollectionDataProvider.php

namespace AppBundle\DataProvider;

use AppBundle\Entity\GeoCoordinates;
use AppBundle\Entity\PostalAddress;
use Symfony\Component\Serializer\Annotation\Groups;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Request;
use ApiPlatform\Core\DataProvider\CollectionDataProviderInterface;
use ApiPlatform\Core\Exception\ResourceClassNotSupportedException;
use Unirest;
// use Mashape\UnirestPhp\Unirest;

final class GeoCoordinatesCollectionDataProvider implements CollectionDataProviderInterface
{
  protected $requestStack;

  public function __construct(RequestStack $requestStack)
    {
        $this->requestStack = $requestStack;
    }

    public function getCollection(string $resourceClass, string $operationName = null)
    {
        if (GeoCoordinates::class !== $resourceClass) {
            throw new ResourceClassNotSupportedException();
        }

        $gmapsApiKey = 'AIzaSyDzVG8kyjhNB-y8wpRk_6KCl-DtQFPsTQw';

        $request = $this->requestStack->getCurrentRequest();
        $test = $request->query;//->get('');
        $props = $test->all();
        $propKeys = array_keys($props);
        // dump($propKeys[1]);
        // dump($props[$propKeys[1]]);

        $headers = array('Accept' => 'application/json');
        $query2 = array('latlng' => '40.714224,-73.961452', 'key' => 'AIzaSyDzVG8kyjhNB-y8wpRk_6KCl-DtQFPsTQw');
        $query = array();
        $query['latlng'] = $props['latitude'].",". $props['longitude'];
        $query['key'] = $gmapsApiKey;
        $response = Unirest\Request::get('https://maps.googleapis.com/maps/api/geocode/json',$headers,$query);
        $responseResults = $response->body->results;
        // dump($response->body->status);
        // dump($responseResults[0]->formatted_address);
//"CV-110, 12317 Herbés, Castellón, Spain"

// $response = Unirest\Request::post('http://mockbin.com/request', $headers, $query);

//       $response->code;        // HTTP Status code
//       $response->headers;     // Headers
//       $response->body;        // Parsed body
//       $response->raw_body;    // Unparsed body


// search Songs of Frank Sinatra
// $headers = array('Accept' => 'application/json');
// $query = array('q' => 'Frank sinatra', 'type' => 'track');
        
// formatted_address
// Display the result
// dump();
// dump($response->body);
// $array = array(
// "title" => "Harry Potter and the Prisoner of Azkaban",
// "author" => "J. K. Rowling",
// "publisher" => "Arthur A. Levine Books",
// "amazon_link" => "http://www.amazon.com/dp/0439136369/"
// );

// $postal = new PostalAddress();
// $postal->setId(2);
$postal = new PostalAddress();
$postal->setId(1);
$postal->setAddressCountry("GR");
$postal->setAddressLocality("jkhkjh");
$postal->setAddressRegion("kjhkj");
$postal->setPostalCode("82100");
$postal->setStreetAddress('sdf');
// $postal = "\1";
// $postal->getId(1);
// $books = (object) $array;
$geoC = new GeoCoordinates();
$geoC->setId(100);
$geoC->setAddress($postal);
$geoC->setLatitude($props['latitude']);
$geoC->setLongitude($props['longitude']);
// new GeoCoordinates(1) = (object)array(
//   'id' => 1,
//   'address' =>"skataa",
//   'latitude' => 40.714224,
//   'longitude' => -73.961452
//   )
//         // Retrieve the blog post collection from somewhere

// $query = array('latlng' => '40.714224,-73.961452', 'key' => 'AIzaSyDzVG8kyjhNB-y8wpRk_6KCl-DtQFPsTQw');


        // var_dump(key($troll[0])); //get the 
        // dump($response);
        // dump($postal);
        return [$geoC];
    }
}